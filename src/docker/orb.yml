version: 2.1

description: Build, test and publish Docker images to the Docker Hub registry

examples:
  standard_build_test_and_publish:
    description: |
      A standard docker workflow, where you are building an image with a
      Dockerfile in the root of your repository, naming the image to be the
      same name as your repository, validating the image setup with the goss tool
      and then pushing it to the Docker registry
    usage:
      version: 2.1

      orbs:
        docker: ledger/docker@volatile

      workflows:
        build_test_and_publish:
          jobs:
            - docker/build_image
            - docker/test_image:
                requires:
                  - docker/build_image
            - docker/publish_image:
                requires:
                  - docker/test_image

  setup_dependencies_services:
    description: |
      Use docker-compose to setup an environment powering the needed service dependencies
    usage:
      version: 2.1

      orbs:
        docker: ledger/docker@volatile

      workflows:
        build_test_and_publish:
          jobs:
            - docker/build_image
            - docker/test_image:
                docker_compose_configuration: docker-compose_circleci.yml
                docker_compose_env_vars: |-
                  MYSQL_VERSION=5.7
                  MYSQL_USER=my_user
                  MYSQL_PASSWORD=my_password
                  MYSQL_DATABASE=my_db
                # each goss run needs to start from a fresh docker-compose environment
                docker_compose_single_use: true
                dgoss_docker_env_vars: |-
                  APP_DB_HOST=mysql-server
                  APP_DB_USER=my_db
                  APP_DB_PASSWORD=my_password
                  APP_DB_SCHEMA=my_db
                requires:
                  - docker/build_image
            - docker/publish_image:
                requires:
                  - docker/test_image

  restore_cache_during_build_image:
    description: |
      A workflow using the `after_checkout` step in `docker/build_image` to restore cache
      before `docker build` is called.
    usage:
      version: 2.1

      orbs:
        docker: ledger/docker@volatile

      workflows:
        build_with_cache:
          jobs:
            - docker/build_image:
                after_checkout:
                  - restore_cache:
                      keys:
                        - my-repository-{{ .Branch }}-{{ checksum "build.file" }}
                        - my-repository-{{ .Branch }}-
                        - my-repository

  publish_to_a_second_registry:
    description: |
      A standard docker workflow, where you are building an image with a
      Dockerfile in the root of your repository, naming the image to be the
      same name as your repository, validating the image setup with the goss tool
      and then pushing it to the Docker registry
    usage:
      version: 2.1

      orbs:
        docker: ledger/docker@volatile

      workflows:
        build_test_and_publish:
          jobs:
            - docker/build_image
            - docker/test_image:
                context: dockerhub
                requires:
                  - docker/build_image
            - docker/publish_image:
                context: dockerhub
                requires:
                  - docker/test_image
            - docker/publish_image:
                context: dockerharbor
                docker_source_namespace: ledgerhq
                requires:
                  - docker/test_image

aliases:
  - &wait_compose_healthy
    name: Wait for all service dependencies to become healthy
    command: |
      for try in {1..10}; do
        sleep 30
        if [ "$(docker ps --filter 'name=ci_' --filter 'health=unhealthy' --filter 'health=starting' --format '{{.Names}}')" = "" ]; then
          docker-compose -f $docker_compose_config -p ci ps
          exit 0
        fi
        docker-compose -f $docker_compose_config -p ci ps
        echo
      done
      echo "Error : some service dependencies are not healthy at the end of the timeout" >&2
      exit 1

executors:
  machine-executor:
    # See https://circleci.com/docs/2.0/configuration-reference/#available-machine-images for supported images
    description: Ubuntu 20.04, Docker v20.10.6, Docker Compose v1.29.1
    machine:
      image: ubuntu-2004:202104-01

commands:
  set_metadata:
    description: Compute all metadatas and expose them as DOCKER_ prefixed environment variables
    parameters:
      docker_project_name:
        description: Name of the project to build
        type: string
        default: ""
      docker_source_namespace:
        description: Override the image namespace
        type: string
        default: ""
      docker_tag:
        description: Override of the tag
        type: string
        default: ""
    steps:
      - set_image_name_env_vars:
          docker_project_name: << parameters.docker_project_name >>
          docker_source_namespace: << parameters.docker_source_namespace >>
      - set_docker_tag_env_var:
          docker_tag: << parameters.docker_tag>>
      - run:
          name: Compute labels and expose them as arguments into $DOCKER_LABELS_ARGS
          environment:
            LABELS_ARGS: >-
              --label "org.opencontainers.image.title=${CIRCLE_PROJECT_REPONAME}"
              --label "org.opencontainers.image.created=`date -Iseconds`"
              --label "org.opencontainers.image.authors=Ledger"
              --label "org.opencontainers.image.url=${CIRCLE_REPOSITORY_URL}"
              --label "org.opencontainers.image.documentation=${CIRCLE_REPOSITORY_URL}"
              --label "org.opencontainers.image.source=${CIRCLE_REPOSITORY_URL}"
              --label "org.opencontainers.image.revision=${CIRCLE_SHA1}"
              --label "org.opencontainers.image.ref.name=${CIRCLE_TAG:${CIRCLE_BRANCH}}"
              --label "org.opencontainers.image.version=${DOCKER_TAG_ONLY}"
          command: echo "export DOCKER_LABELS_ARGS=\"${LABEL_ARGS}\"" >> $BASH_ENV
    
  set_image_name_env_vars:
    description: Set environment variables used to name the docker image
    parameters:
      docker_project_name:
        description:
          Name of the project to build
        type: string
        default: ""
      docker_source_namespace:
        description:
          Override the image namespace
        type: string
        default: ""
    steps:
      - run:
          name: Write environment variables to $BASH_ENV
          command: |
            if [ -n "<< parameters.docker_source_namespace >>" ]; then
              DOCKER_NAMESPACE="<< parameters.docker_source_namespace >>"
            else
              DOCKER_NAMESPACE="${DOCKER_ORGANIZATION:-${DOCKER_USERNAME}}"
              # On public repositories, CircleCI environment variables are not transmitted to jobs triggered by a forked PR
              # so if the DOCKER_NAMESPACE is empty then fall back to a generic CircleCI-provided variable
              DOCKER_NAMESPACE="${DOCKER_NAMESPACE:-${CIRCLE_USERNAME}}"
            fi
            # Docker repository name must be lowercase
            eval echo 'export DOCKER_NAMESPACE="${DOCKER_NAMESPACE,,}"' >> $BASH_ENV
            if [ -z "<< parameters.docker_project_name >>" ]; then
              PROJECT_NAME="${DOCKER_PROJECT_NAME:-${CIRCLE_PROJECT_REPONAME}}"
            else
              PROJECT_NAME="<< parameters.docker_project_name >>"
            fi
            eval echo 'export PROJECT_NAME="$(echo ${PROJECT_NAME}| sed 's/[^[:alnum:]_.-]/_/g')"' >> $BASH_ENV
            local_name=${PROJECT_NAME}
            image_name="${DOCKER_NAMESPACE}/${PROJECT_NAME}"
            if [ -n "${DOCKER_SERVER}" ]; then
              image_name="${DOCKER_SERVER}/${image_name}"
            fi
            if [ "${DOCKER_SERVER}" = "docker.pkg.github.com" ]; then
              # hack: github need :owner/:repo_name/:image_name
              # we have something like:
              #   docker.pkg.github.com/ledgerhq/ledger-vault-api
              # we need:
              #   docker.pkg.github.com/ledgerhq/ledger-vault-api/ledger-vault-api
              image_name="${image_name}/${PROJECT_NAME}"
            fi
            echo "export DOCKER_IMAGE_NAME=\"${image_name}\"" >> $BASH_ENV
            echo "Docker final image name is \"${image_name}\""
            echo "export DOCKER_LOCAL_NAME=\"${local_name}\"" >> $BASH_ENV
            echo "Docker image will be referenced locally as \"${local_name}\""

  set_docker_tag_env_var:
    description: Set environment variable of the docker tag to push
    parameters:
      docker_tag:
        description:
          Override of the tag
        type: string
        default: ""
    steps:
      - run:
          name: Write environment variables to $BASH_ENV
          command: |
            SEMVER_SUFFIXES="(rc|alpha|beta|pre|dev)"

            if [ -n "<< parameters.docker_tag >>" ]; then
              TAG="<< parameters.docker_tag >>"
            elif [[ -n "${CIRCLE_TAG}" ]]; then
              TAG=$(echo $CIRCLE_TAG | sed 's/[^[:alnum:]_.-]/_/g')
            elif [[ -n "${CIRCLE_BRANCH}" ]]; then
              if [[ "${CIRCLE_BRANCH}" == "master" || "${CIRCLE_BRANCH}" == "main" ]]; then
                # latest tag on main/master
                TAG="latest"
              elif [[ "${CIRCLE_BRANCH}" =~ ^release\/[0-9]+\.[0-9]+$ ]]; then
                # latest-<major>.<minor> on release/<major>.<minor> branches
                TAG="latest-${CIRCLE_BRANCH##*/}"
              else
                TAG=$(echo $CIRCLE_BRANCH | sed 's/[^[:alnum:]_.-]/_/g')
              fi
            else
              echo "Unexpected condition state :" >&2
              echo "The build should be either commit-triggered or tag-triggered" >&2
              echo "So CircleCI should provide either the BRANCH or the TAG environment variable" >&2
              exit 1
            fi

            echo "export DOCKER_TAG=\"${DOCKER_IMAGE_NAME}:${TAG}\"" >> $BASH_ENV
            echo "export DOCKER_TAG_ONLY=\"${TAG}\"" >> $BASH_ENV
            echo "Docker image name with tag is \"${TAG}\""

            # Optionnal <major.minor> rolling tag on sem-ver 
            if [[ "$TAG" =~ ^[0-9]+(\.[0-9]+)+(-$SEMVER_SUFFIXES(\.|-)?[0-9]+)?$ ]]; then
              major=`echo $TAG | cut -d. -f1`
              minor=`echo $TAG | cut -d. -f2`
              ROLLING_TAG="$major.$minor"
              echo "Docker image rolling tag is \"${ROLLING_TAG}\""
              echo "export DOCKER_ROLLING_TAG=\"${DOCKER_IMAGE_NAME}:${ROLLING_TAG}\"" >> $BASH_ENV
              echo "export DOCKER_ROLLING_TAG_ONLY=\"${ROLLING_TAG}\"" >> $BASH_ENV
            fi

  docker_login:
    description: Login to the Docker registry
    steps:
      - run:
          name: Check environment variables existence
          command: |
            if [[ -z "${DOCKER_USERNAME}" ]]; then
              echo "DOCKER_USERNAME is not set, will not be able to connect to Docker Hub" >&2
              exit 1
            fi

            if [[ -z "${DOCKER_PASSWORD}" ]]; then
              echo "DOCKER_PASSWORD is not set, will not be able to connect to Docker Hub" >&2
              exit 1
            fi
      - run: docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_SERVER:-}
  load_image:
    description: |
      Loads the docker image that has been built from the workspace
    steps:
      - attach_workspace:
          at: ~/workspace
      - run: docker load -i ~/workspace/docker_image.tar
      - run:
          name: Check docker image existence
          command: docker inspect ${DOCKER_LOCAL_NAME}:${CIRCLE_SHA1} &> /dev/null

jobs:
  build_image:
    description: Builds and tags a Docker Image
    executor: machine-executor
    parameters:
      after_checkout:
        description: Steps that will be executed after the sources checkout but before the Docker image build
        type: steps
        default: []
      docker_login:
        description: |
          Login to Docker Hub before building the image.
          Set this parameter to true if the Dockerfile pulls private images.
        type: boolean
        default: false
      docker_build_args:
        description: |
          Set arguments to pass to the command "docker build" in addition to the commit SHA1 being added as a Docker tag.
        type: string
        default: ""
      docker_build_target:
        description: |
          Set the directory to target with the command "docker build", i.e. the folder containing the Dockerfile.
        type: string
        default: "."
      docker_project_name:
        description:
          Name of the project to build
        type: string
        default: ""
      docker_source_namespace:
        description:
          Override the image namespace
        type: string
        default: ""
      buildkit:
        description: |
          Enable Buildkit.
          Set this to true if your build relies on Docker Buildkit
        type: boolean
        default: false
      docker_tag:
        description:
          Override the tag to push
        type: string
        default: ""
    environment:
        DOCKER_BUILDKIT: << parameters.buildkit >>
    steps:
      - set_metadata:
          docker_project_name: << parameters.docker_project_name >>
          docker_source_namespace: << parameters.docker_source_namespace >>
          docker_tag: << parameters.docker_tag>>
      - checkout
      - steps: << parameters.after_checkout >>
      - when:
          condition: << parameters.docker_login >>
          steps:
            - docker_login
      - run:
          name: Build Docker image
          command: |
            echo ".git" >> << parameters.docker_build_target >>/.dockerignore
            docker_args="-t ${DOCKER_LOCAL_NAME}:${CIRCLE_SHA1} ${DOCKER_LABELS_ARGS} << parameters.docker_build_args >>"
            echo "Executing docker build with the following arguments :" ${docker_args}
            docker build ${docker_args} << parameters.docker_build_target >>
      - run:
          name: Create workspace
          command: mkdir -pv ~/workspace
      - run:
          name: Save Docker image to the workspace
          command: docker save -o ~/workspace/docker_image.tar ${DOCKER_LOCAL_NAME}
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - docker_image.tar
  test_image:
    description: Enforce compliance tests on the Docker image with the goss framework
    executor: machine-executor
    parameters:
      docker_compose_configuration:
        description: |
          Name of the docker-compose configuration file used to setup an environment powering the
          service dependencies. The file is expected to be stored alongside the CircleCI configuration
          config.yml.
        type: string
        default: ""
      docker_compose_env_vars:
        description: Environment variables to pass to docker-compose
        type: string
        default: ""
      docker_compose_single_use:
        description: |
          The dgoss tool is run twice : once to get human-readable output and a second time
          to get JUnit output that can be parsed by CircleCI.
          Some applications may be not re-run twice from scratch because there is some persistent
          state stored in a database.
          If true, the docker-compose environment powering the service dependencies will be reset
          before the second dgoss execution.
        type: boolean
        default: false
      goss_version:
        description: goss version to install
        type: string
        default: v0.3.9
      dgoss_docker_env_vars:
        description: Environment variables that dgoss should provide to the container
        type: string
        default: ""
      goss_sleep:
        description: Time to sleep after running container (and optionally goss_wait.yaml) and before running tests
        type: string
        default: 1s
      docker_project_name:
        description:
          Name of the project to build
        type: string
        default: ""
      docker_source_namespace:
        description:
          Override the image namespace to push
        type: string
        default: ""
      docker_login:
        description: |
          Login to Docker registry given as context before testing.
          Set this parameter to true if the docker-compose or goss pull on a private image.
        type: boolean
        default: false
    steps:
      - set_image_name_env_vars:
          docker_project_name: << parameters.docker_project_name >>
          docker_source_namespace: << parameters.docker_source_namespace >>
      - load_image
      - checkout
      - when:
          condition: << parameters.docker_login >>
          steps:
            - docker_login
      - when:
          condition: << parameters.docker_compose_configuration >>
          steps:
            - run:
                name: Compute CircleCI configuration directory path
                command: |
                    # eval is needed for the CIRCLE_WORKING_DIRECTORY variable as it contains a non-expanded '~'
                    eval CIRCLE_CONFIG_DIRECTORY=${CIRCLE_WORKING_DIRECTORY}/.circleci
                    echo "export CIRCLE_CONFIG_DIRECTORY='$CIRCLE_CONFIG_DIRECTORY'" >> $BASH_ENV
            - when:
                condition: << parameters.docker_compose_env_vars >>
                steps:
                  - run:
                      name: Set environment variables read by docker-compose
                      # '<<' must be escaped in v2.1+
                      # https://discuss.circleci.com/t/2-1-config-and-build-processing/24102/31
                      # With docker-compose v1.28+, .env file should be in project directory or specified using --env_file
                      # See: https://docs.docker.com/compose/env-file/
                      command: |
                        cat > ${CIRCLE_CONFIG_DIRECTORY}/.env \<< EOF
                        << parameters.docker_compose_env_vars >>
                        EOF
            - run:
                name: Display docker-compose configuration
                command: |
                  # eval is needed for the CIRCLE_WORKING_DIRECTORY variable as it contains a non-expanded '~'
                  docker_compose_config=${CIRCLE_CONFIG_DIRECTORY}/<< parameters.docker_compose_configuration >>
                  echo "export docker_compose_config='$docker_compose_config'" >> $BASH_ENV
                  docker-compose -f $docker_compose_config -p ci config
      - run:
          name: Install goss and dgoss wrapper
          command: |
            mkdir -p ~/bin
            curl -fsSL -o ~/bin/goss https://github.com/aelsabbahy/goss/releases/download/<< parameters.goss_version >>/goss-linux-amd64
            curl -fsSL -o ~/bin/dgoss https://raw.githubusercontent.com/aelsabbahy/goss/<< parameters.goss_version >>/extras/dgoss/dgoss
            chmod +rx ~/bin/goss ~/bin/dgoss
      - when:
          condition: << parameters.dgoss_docker_env_vars >>
          steps:
            - run:
                name: Set docker environment variables to be passed by dgoss
                command: |
                  cat > docker.env \<< EOF
                  << parameters.dgoss_docker_env_vars >>
                  EOF
                  echo "export docker_opts='${docker_opts:-} --env-file docker.env'" >> $BASH_ENV
      - when:
          condition: << parameters.docker_compose_configuration >>
          steps:
            - run:
                name: Setup docker-compose environment powering service dependencies
                command: |
                  docker-compose -f $docker_compose_config -p ci up -d
                  # The default bridge network created by docker-compose is named "<project name>_default"
                  echo "export docker_opts='${docker_opts:-} --network ci_default'" >> $BASH_ENV
            - run: *wait_compose_healthy
      - run:
          name: Set goss environment variables
          command: |
            eval GOSS_FILES_PATH="${CIRCLE_WORKING_DIRECTORY}/.circleci"
            echo "export GOSS_FILES_PATH='$GOSS_FILES_PATH'" >> $BASH_ENV
            echo "export GOSS_SLEEP='<< parameters.goss_sleep >>'" >> $BASH_ENV
      - run:
          name: Run goss validation
          command: |
            echo "Executing dgoss run with the following arguments :" $docker_opts
            dgoss run $docker_opts ${DOCKER_LOCAL_NAME}:${CIRCLE_SHA1}
      - when:
          condition: << parameters.docker_compose_single_use >>
          steps:
            - run:
                name: Reset docker-compose environment
                command: |
                  docker-compose -f $docker_compose_config -p ci down
                  docker-compose -f $docker_compose_config -p ci up -d
            - run: *wait_compose_healthy
      - run:
          name: Run goss validation again to extract the JUnit result
          command: |
            mkdir -p /tmp/goss-test-results/goss
            GOSS_OPTS="--format junit" dgoss run $docker_opts ${DOCKER_LOCAL_NAME}:${CIRCLE_SHA1} 2>&1 | \
              sed -n '/^<[[:alpha:]/?]/p' > /tmp/goss-test-results/goss/results.xml
      - store_test_results:
          path: /tmp/goss-test-results
  publish_image:
    description: Publish docker image to the Docker Hub registry
    executor: machine-executor
    parameters:
      docker_project_name:
        description:
          Name of the project to build
        type: string
        default: ""
      docker_source_namespace:
        description:
          Override the image namespace to push
        type: string
        default: ""
      docker_tag:
        description:
          Override the tag to push
        type: string
        default: ""
      rolling_tag:
        description: Also publish the rolling tag (ie. <major>.<minor>) if a semver version is detected
        type: boolean
        default: false
    steps:
      - set_metadata:
          docker_project_name: << parameters.docker_project_name >>
          docker_source_namespace: << parameters.docker_source_namespace >>
          docker_tag: << parameters.docker_tag>>
      - load_image
      - run: docker tag ${DOCKER_LOCAL_NAME}:${CIRCLE_SHA1} ${DOCKER_TAG}
      - docker_login
      - run: docker push ${DOCKER_TAG}
      - when: 
          condition: 
            and: 
              - << parameters.rolling_tag >>
              - "${DOCKER_ROLLING_TAG}"
          steps:
            - run: docker tag ${DOCKER_LOCAL_NAME}:${CIRCLE_SHA1} ${DOCKER_ROLLING_TAG}
            - run: docker push ${DOCKER_ROLLING_TAG}
