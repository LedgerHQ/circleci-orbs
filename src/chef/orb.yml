version: 2.1

description: Deploy Chef code

examples:
  chef_validate:
    description: Validate a Chef cookbook & run Test Kitchen with JUnit output
    usage:
      version: 2.1

      orbs:
        chef: ledger/chef@volatile

      workflows:
        chef_validate:
          jobs:
            - chef/check_cookbook_version
            - chef/validate_json:
                requires:
                  - chef/check_cookbook_version
            - chef/cookstyle:
                requires:
                  - chef/check_cookbook_version
            - chef/foodcritic:
                requires:
                  - chef/check_cookbook_version
            - chef/kitchen:
                test_kitchen_instance: all
                junit_output: /tmp/test-kitchen-results/
                requires:
                  - chef/validate_json
                  - chef/cookstyle
                  - chef/foodcritic

  test_kitchen_with_external_databags:
    description: Get an external databag from a VCS & run Test Kitchen
    usage:
      version: 2.1

      orbs:
        chef: ledger/chef@volatile

      workflows:
        test_kitchen:
          jobs:
            - chef/kitchen:
                data_bags_vcs_url: git@github.com:my_databags_repository
                data_bags_path: /tmp/databags/

  upload_cookbook:
    description: Upload the cookbook on a Chef Server and publish a message on Slack
    usage:
      version: 2.1

      orbs:
        chef: ledger/chef@volatile

      workflows:
        upload_cookbook:
          jobs:
            - chef/berks_upload:
                chef_server_url: https://api.chef.io/organizations/my_chef_org
                client_name: circleci
                slack_notification: true
                filters:
                  branches:
                    only: master

  upload_databags:
    description: Upload the databags on a Chef Server and publish a message on Slack
    usage:
      version: 2.1

      orbs:
        chef: ledger/chef@volatile

      workflows:
        upload_databags:
          jobs:
            - chef/knife_databag_upload:
                chef_server_url: https://api.chef.io/organizations/my_chef_org
                client_name: circleci
                slack_notification: true
                filters:
                  branches:
                    only: master

orbs:
  slack: circleci/slack@volatile

aliases:
  - &test_kitchen
    name: Test Kitchen
    # The --no-color option is not entirely respected for now
    # https://github.com/inspec/kitchen-inspec/issues/103
    command: kitchen test --destroy=never --no-color '<< parameters.test_kitchen_instance >>'
  - &setup_knife
    name: Setup Knife
    command: |
      echo ${CHEF_KEY:?Missing CHEF_KEY environment variable} | base64 --decode > ~/chef_key
      chmod 400 ~/chef_key
      knife configure --server-url << parameters.chef_server_url >> --user << parameters.client_name >> --key ~/chef_key
  - &list_file_changes
    name: List changed and deleted file from the master branch
    command: |
      base="origin/master"
      if [ "${CIRCLE_BRANCH}" = "master" ]; then
        base="master^1"
      fi
      echo "List of changed files :"
      list_changed_files=$(git diff ${base}..HEAD --no-renames --diff-filter=AM --name-only "*\.json" | tee /dev/tty)
      echo "export list_changed_files='$list_changed_files'" >> $BASH_ENV
      echo "List of deleted files :"
      list_deleted_files=$(git diff ${base}..HEAD --no-renames --diff-filter=D --name-only "*\.json" | tee /dev/tty)
      echo "export list_deleted_files='$list_deleted_files'" >> $BASH_ENV
  - &upload_jobs_common_parameters
    chef_server_url:
      description: The Chef server URL
      type: string
    client_name:
      description: |
        The user name used by knife to sign requests made by the API client to the Chef server.
        Authentication fails if the user name does not match the private key.
        The private key is read from the CircleCI environment variable named CHEF_KEY.
      type: string
      default: circleci
    slack_notification:
      description: |
        Publish a status message on Slack.
        This feature relies on the circleci/slack orb.
      type: boolean
      default: true
  - &parse_pr_number
    name: Get the pull request number from the commit message
    command: |
      pull_request=$(git show -s --format="%B" HEAD | sed -nr 's/^.*#([[:digit:]]+)[^#]*$/\1/p')
      if [ -n "${pull_request}" ]; then
        echo "export pull_request='https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pull/${pull_request}'" >> $BASH_ENV
      fi
  - &publish_slack_status
    when:
      condition: <<parameters.slack_notification>>
      steps:
        - slack/status:
            success_message: |
              :tada: A $CIRCLE_JOB job has succeeded! $SLACK_MENTIONS
              Pull request : ${pull_request:-Not found}
              Job triggered by : $CIRCLE_USERNAME
            failure_message: |
              :red_circle: A $CIRCLE_JOB job has failed! $SLACK_MENTIONS
              Pull request : ${pull_request:-Not found}
              Job triggered by : $CIRCLE_USERNAME
            include_job_number_field: false

commands:
  install_chef_workstation:
    description: Install Chef Workstation bundle. This command only works on Debian-based OS
    steps:
      - run: curl -fsS https://packages.chef.io/chef.asc | sudo apt-key add -
      - run:
          name: Setup Chef repository
          command: |
            if ! command -v add-apt-repository &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y software-properties-common
            fi
            sudo add-apt-repository "https://packages.chef.io/repos/apt/stable"
      - run: sudo apt-get update
      - run: sudo apt-get install -y chef-workstation
      - run: echo 'eval "$(chef shell-init bash)"' >> $BASH_ENV
  get_data_bags:
    description: Retrieve data bags needed by the cookbook
    parameters:
      vcs_url:
        description: The version control systems URL where the data bags are hosted
        type: string
      path:
        description: The path where the data bags should be put
        type: string
        default: /tmp/databags/
    steps:
      - run: mkdir -p ~/.ssh
      - run:
          command: git clone << parameters.vcs_url >> << parameters.path >>
          environment:
            GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no

jobs:
  check_cookbook_version:
    description: Check that the cookbook version has been upgraded
    machine: true
    steps:
      - checkout
      - run:
          name: Check that the cookbook version has been upgraded
          command: |
            base="origin/master"
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              base="master^1"
            fi

            semver="[[:digit:]]+\.[[:digit:]]+(\.[[:digit:]]+)*"
            if ! egrep -q "^${semver}$" VERSION; then
              echo "Error : Missing or invalid version in the file VERSION" >&2
              exit 1
            fi

            oldver=$(git diff ${base}..HEAD VERSION | sed -rn "/^-${semver}$/ s/-//p")
            newver=$(git diff ${base}..HEAD VERSION | sed -rn "/^\+${semver}$/ s/\+//p")
            # Check that the newer version is superior to the older version
            if [[ -z ${oldver} ]] || [[ -z ${newver} ]] || [ "$(echo -e "$oldver\n$newver" | sort -V | head -n 1)" != "$oldver" ]; then
              echo "Error : the cookbook version isn't valid or hasn't been upgraded" >&2
              echo "Value found in the current HEAD : $(git show HEAD:VERSION)" >&2
              echo "Value found in the ${base} commit : $(git show ${base}:VERSION)" >&2
              exit 1
            fi
            echo "Cookbook version upgrade : ${oldver} -> ${newver}"
  check_serial:
    description: Check that the serial has been increased
    machine: true
    steps:
      - checkout
      - run:
          name: Check that the serial has been increased
          command: |
            base="origin/master"
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              base="master^1"
            fi

            serial="[[:digit:]]+"
            if ! egrep -q "^${serial}$" SERIAL; then
              echo "Error : Missing or invalid serial in the file SERIAL" >&2
              exit 1
            fi

            oldser=$(git diff ${base}..HEAD SERIAL | sed -rn "/^-${serial}$/ s/-//p")
            newser=$(git diff ${base}..HEAD SERIAL | sed -rn "/^\+${serial}$/ s/\+//p")
            # Check that the newer serial is superior to the older version
            if [[ -z ${oldser} ]] || [[ -z ${newser} ]] || [ "$(echo -e "$oldser\n$newser" | sort -n | head -n 1)" != "$oldser" ]; then
              echo "Error : the serial isn't valid or hasn't been increased" >&2
              echo "Value found in the current HEAD : $(git show HEAD:SERIAL)" >&2
              echo "Value found in the ${base} commit : $(git show ${base}:SERIAL)" >&2
              exit 1
            fi
            echo "Serial update : ${oldser} -> ${newser}"
  validate_json:
    description: Validate JSON files
    machine: true
    steps:
      - checkout
      - run:
          name: Validate JSON files with jq
          command: find . -name "*\.json" | parallel --tag jq '.' > /dev/null
  rubocop:
    description: Execute Rubocop analyzer
    docker:
      - image: chef/chefdk
    steps:
      - checkout
      - run: rubocop
  cookstyle:
    description: Execute Cookstyle analyzer
    docker:
      - image: chef/chefdk
    steps:
      - checkout
      - run: cookstyle
  foodcritic:
    description: Execute Foodcritic linter
    docker:
      - image: chef/chefdk
    steps:
      - checkout
      - run: foodcritic .
  kitchen:
    description: Execute Test Kitchen
    # Dokken Kitchen driver doesn't work when launched from a Docker container
    # https://github.com/someara/kitchen-dokken/issues/160#issuecomment-423829306
    machine: true
    parameters:
      test_kitchen_instance:
        description: Run Test Kitchen on this instance or set of instances in case of a regexp
        type: string
        default: all
      junit_output:
        description: The path where Test Kitchen may store its output in JUnit format
        type: string
        default: /tmp/test-kitchen-results/
      data_bags_vcs_url:
        description: The version control systems URL where the data bags are hosted
        type: string
        default: ""
      data_bags_path:
        description: |
          The path where the data bags should be put.
          It will be passed to Test Kitchen through the DATA_BAGS_PATH environment variable
        type: string
        default: /tmp/databags/
    steps:
      - checkout
      - install_chef_workstation
      - when:
          condition: << parameters.data_bags_vcs_url >>
          steps:
            - get_data_bags:
                vcs_url: << parameters.data_bags_vcs_url >>
                path: << parameters.data_bags_path >>
            - run:
                <<: *test_kitchen
                environment:
                  DATA_BAGS_PATH: << parameters.data_bags_path >>
      - unless:
          condition: << parameters.data_bags_vcs_url >>
          steps:
            - run: *test_kitchen
      - store_test_results:
          path: << parameters.junit_output >>
  berks_upload:
    description: Use Berkshelf to upload the cookbook on a Chef Server
    docker:
      - image: chef/chefdk
    parameters: *upload_jobs_common_parameters
    steps:
      - checkout
      - run: *setup_knife
      - run: berks install --except=integration
      - run: berks upload --except=integration
      - run: *parse_pr_number
      - *publish_slack_status
  knife_databag_upload:
    description: Use Knife to sync databags with the Chef Server
    docker:
      - image: chef/chefdk
    parameters: *upload_jobs_common_parameters
    steps:
      - checkout
      - run: *setup_knife
      - run: *list_file_changes
      - run:
          name: Upload new or changed data bags
          command: |
            for file in $list_changed_files; do
              databag=$(basename $(dirname $file))
              databag_exists="databag_${databag/-/_}_exists"
              if [ ${!databag_exists:-0} -ne 1 ]; then
                knife data bag create $databag
                declare databag_${databag/-/_}_exists=1
              fi
              knife data bag from file $databag $file
            done
      - run:
          name: Delete removed data bags
          command: |
            for file in $list_deleted_files; do
              databag=$(basename $(dirname $file))
              item=$(basename -s ".json" $file)
              knife data bag delete -y $databag $item
              if [ -z "$(knife data bag show $databag)" ]; then
                knife data bag delete -y $databag
              fi
            done
      - run: *parse_pr_number
      - *publish_slack_status
  knife_environment_upload:
    description: Use Knife to sync environments with the Chef Server
    docker:
      - image: chef/chefdk
    parameters: *upload_jobs_common_parameters
    steps:
      - checkout
      - run: *setup_knife
      - run: *list_file_changes
      - run:
          name: Upload new or changed environments
          command: |
            for file in $list_changed_files; do
              knife environment from file $file
            done
      - run:
          name: Delete removed environments
          command: |
            for file in $list_deleted_files; do
              env=$(basename -s ".json" $file)
              knife environment delete -y $env
            done
      - run: *parse_pr_number
      - *publish_slack_status
  knife_role_upload:
    description: Use Knife to sync roles with the Chef Server
    docker:
      - image: chef/chefdk
    parameters: *upload_jobs_common_parameters
    steps:
      - checkout
      - run: *setup_knife
      - run: *list_file_changes
      - run:
          name: Upload new or changed roles
          command: |
            for file in $list_changed_files; do
              knife role from file $file
            done
      - run:
          name: Delete removed roles
          command: |
            for file in $list_deleted_files; do
              role=$(basename -s ".json" $file)
              knife role delete -y $role
            done
      - run: *parse_pr_number
      - *publish_slack_status
